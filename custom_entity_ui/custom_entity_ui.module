<?php

/**
 * @file
 * Contains custom_entity_ui.module.
 */

use Drupal\Core\Entity\EntityFormInterface;
use Drupal\Core\Entity\ContentEntityTypeInterface;
use Drupal\Core\Config\Entity\ConfigEntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\Component\Utility\NestedArray;

/**
 * Implements hook_help().
 */
function custom_entity_ui_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help.
    case 'help.page.custom_entity_ui':
      return t('<h3>About</h3><p>The Custom Entity UI module provides an admin interface for custom entity types.</p>');
    default:
      return '';
  }
}

/**
 * Implements hook_form_alter().
 */
function custom_entity_ui_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (is_a($form_state->getFormObject(), EntityFormInterface::class)) {
    /** @var \Drupal\Core\Entity\EntityFormInterface $entity_form */
    $entity_form = $form_state->getFormObject();
    $entity_type = $entity_form->getEntity()->getEntityType();

    if ($entity_type->id() === 'entity_form_display') {
      // Add form display form element.
      /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
      $form_display = $entity_form->getEntity();
      $advanced_settings = array_merge([
        'redirect_destination' => '',
        'message_success' => '',
      ], $form_display->getThirdPartySettings('custom_entity'));

      $form['advanced'] = [
        '#type' => 'details',
        '#title' => t('Advanced settings'),
        'redirect_destination' => [
          '#type' => 'textfield',
          '#title' => t('Redirect destination'),
          '#description' => t('Route to redirect to after successful form submission.'),
          '#default_value' => $advanced_settings['redirect_destination'],
        ],
        'message_success' => [
          '#type' => 'textfield',
          '#title' => t('Success message'),
          '#description' => t('Status message to display after successful form submission.'),
          '#default_value' => $advanced_settings['message_success'],
        ],
      ];

      $form['#entity_builders'][] = 'custom_entity_ui_save_advanced_settings';
    }
    elseif (is_a($entity_type, ContentEntityTypeInterface::class)) {
      // Add content entity form submit handler.
      $form['actions']['submit']['#submit'][] = 'custom_entity_ui_content_entity_form_submit';
    }
  }
}

/**
 * Entity builder callback saving advanceach (d settings as received from then form.
 *
 * @param string $entity_type_id
 *   The entity type ID, i.e. 'entity_form_display'.
 * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $entity
 *   The display form entity, i.e. the display form entity.
 * @param array $form
 *   The renderable display form settings form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The display form settings form state.
 */
function custom_entity_ui_save_advanced_settings(string $entity_type_id, ConfigEntityInterface $entity, array &$form, FormStateInterface &$form_state) {
  $advanced_keys = NestedArray::filter(array_keys($form['advanced']), function ($key) {
    return substr($key, 0, 1) !== '#';
  });

  foreach ($advanced_keys as $advanced_key) {
    if ($setting = $form_state->getValue($advanced_key)) {
      $entity->setThirdPartySetting('custom_entity', $advanced_key, $setting);
    }
    else {
      $entity->unsetThirdPartySetting('custom_entity', $advanced_key);
    }
  }
}

/**
 * Submit handler for content entity forms.
 *
 * @param array $form
 *   The renderable form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 */
function custom_entity_ui_content_entity_form_submit(array &$form, FormStateInterface $form_state) {
  /** @var \Drupal\Core\Entity\ContentEntityFormInterface $entity_form */
  $entity_form = $form_state->getFormObject();
  $entity = $entity_form->getEntity();
  $settings = $entity_form
    ->getFormDisplay($form_state)
    ->getThirdPartySettings('custom_entity');

  if (array_key_exists('redirect_destination', $settings)) {
    $redirect_url = Url::fromRoute($settings['redirect_destination'], [$entity->getEntityTypeId() => $entity->id()]);
    $form_state->setRedirectUrl($redirect_url);
  }

  if (array_key_exists('message_success', $settings)) {
    if (empty($form_state->getErrors())) {
      Drupal::messenger()->addStatus($settings['message_success']);
    }
  }
}

///**
// * Implements hook_menu_local_actions_alter().
// */
//function custom_entity_ui_menu_local_actions_alter(&$local_actions) {
//  $local_action_builders = Drupal::service('local_action_builder.entity.collector')->getLocalEntityActionBuilders();
//  foreach (Drupal::entityTypeManager()->getDefinitions() as $entity_type) {
//    /** @var \Drupal\custom_entity_ui\Menu\LocalEntityActionBuilderInterface $action_builder */
//    foreach ($local_action_builders as $action_builder) {
//      if ($action_builder->applies($entity_type)) {
//        $local_action = $action_builder->buildLocalAction($entity_type);
//        $local_actions[$local_action['id']] = $local_action;
//      }
//    }
//  }
//}
